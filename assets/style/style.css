:root {
  /* --bgcolor: #ffe6f2;
  --fgcolor: #0042d0; */
  --bgcolor: white;
  --fgcolor: black;

  /* Grayscale for use in experiments */
  --light: hsl(0, 0%, 85%);
  --medium: hsl(0, 0%, 55%);
  --dark: hsl(0, 0%, 40%);

  --termcolor: #424242ca;
  --gap: 1rem;
}

/* MARK: Main Layout
Following https://www.a11yproject.com/posts/how-to-hide-content/ */
.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

* {
  box-sizing: border-box;
}

[id] {
  scroll-margin: 3rem;
}

html {
  scroll-behavior: smooth;
}

body {
  margin: 0;
  padding: 4rem 1rem;
  /* Thanks to https://modernfontstacks.com/ */
  font-family: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;
  font-weight: normal;
}

header,
footer {
  display: contents;
}

/* MARK: Logo Animation
*/

header > a {
  display: block;
  position: fixed;
  top: 1rem;
  left: 1rem;
  width: 4rem;
  z-index: calc(infinity);
  animation: breathe 5s ease-out infinite normal;
}

@keyframes breathe {
  0% {
    transform: scale(0.96);
  }
  25% {
    transform: scale(1);
  }
  60% {
    transform: scale(0.96);
  }
  100% {
    transform: scale(0.96);
  }
}

header > a div {
  @supports (animation-timeline: scroll()) {
    animation: rotateX linear;
    animation-timeline: scroll(root y);
  }
}
header > a svg {
  background: red;
  fill: white;

  @supports (animation-timeline: scroll()) {
    animation: rotateY linear;
    animation-timeline: scroll(root x);
  }
}

@keyframes rotateX {
  0% {
    transform: rotateX(0deg);
  }
  100% {
    transform: rotateX(7560deg);
  }
}
@keyframes rotateY {
  0% {
    transform: rotateY(0deg);
  }
  100% {
    transform: rotateY(7560deg);
  }
}

header ul {
  position: fixed;
  padding: 0;
  top: 0.5rem;
  right: 1rem;
  display: flex;
  flex-flow: row nowrap;
  gap: var(--gap);
  list-style: none;
  max-width: calc(100vw - 7rem);
  overflow: hidden;
  z-index: 99;
}

footer p {
  position: fixed;
  bottom: 1rem;
  left: 1rem;
  margin: 0;
}

footer p span {
  display: inline-block;
  transform-origin: center;
  transform: rotate(180deg);
  margin-right: 0.1rem;
}

main {
  position: relative;

  @media (max-width: 30rem) {
    & > * {
      margin: 1rem 0;
      overflow: hidden;
    }
  }
}

article h2 {
  margin-top: 0.2rem;
}
article ol,
article ul {
  padding: 0;
  list-style-position: inside;
}
article sup {
  line-height: 0.6rem;
  font-size: 0.8rem;
}
article sup a,
article .footnotes a {
  text-decoration: none;
}
article hr {
  margin: 1rem 0;
  border: 0;
  height: 1px;
  width: 7rem;
  background: var(--fgcolor);
}

div#grid {
  --gridcolor: gainsboro;
  display: none;
  position: absolute;
  pointer-events: none;
  z-index: -1;
  width: 100%;
  height: 100%;
  border: 1px solid var(--gridcolor);
  background: repeating-linear-gradient(
      to right,
      transparent,
      transparent calc(var(--cellsize) - 1px),
      var(--gridcolor) var(--cellsize),
      transparent calc(var(--cellsize) + 1px),
      transparent calc(var(--cellsize) + var(--gapsize) - 2px),
      var(--gridcolor) calc(var(--cellsize) + var(--gapsize) - 1px),
      transparent calc(var(--cellsize) + var(--gapsize))
    ),
    repeating-linear-gradient(
      to bottom,
      transparent,
      transparent calc(var(--cellsize) - 1px),
      var(--gridcolor) var(--cellsize),
      transparent calc(var(--cellsize) + 1px),
      transparent calc(var(--cellsize) + var(--gapsize) - 2px),
      var(--gridcolor) calc(var(--cellsize) + var(--gapsize) - 1px),
      transparent calc(var(--cellsize) + var(--gapsize))
    );
}

@media (min-width: 30rem) {
  main {
    --cellsize: 15rem;
    --gapsize: 2rem;

    display: grid;
    place-items: stretch;
    justify-content: stretch;

    width: calc(42 * var(--cellsize) + 41 * var(--gapsize));
    grid-template-columns: repeat(42, var(--cellsize));
    grid-template-rows: repeat(42, var(--cellsize));
    gap: var(--gapsize);
  }
  div#grid {
    display: block;
  }
}

@media (min-width: 60rem) {
  main {
    --cellsize: 20rem;
    --gapsize: 5rem;
  }
}

/* MARK: Placement
*/
#welcome {
  grid-column: 1 / 2;
  grid-row: 1 / 2;
}

#garden {
  grid-column: 2 / span 2;
  grid-row: 3 / span 2;
}

#moire {
  grid-column: 3 / 4;
  grid-row: 1 / 3;
}

#penrose {
  aspect-ratio: 1/1;
  grid-column: 2 / 3;
  grid-row: 2 / 3;
}

#incomprehensible {
  grid-column: 15 / 16;
  grid-row: 25 / 26;
}

#reutersvard {
  grid-column: 1 / 2;
  grid-row: 4 / 5;
}

#desire {
  grid-column: 16 / span 2;
  grid-row: 2 / span 3;
  columns: auto var(--cellsize);
}

#skull {
  grid-column: 5 / 6;
  grid-row: 5 / 6;

  img {
    height: 100%;
    margin: 0 auto;
  }
}

#manpage {
  grid-column: 40 / span 2;
  grid-row: 3;
}

#diwhy {
  grid-column: 7 / span 2;
  grid-row: 14 / span 2;

  display: flex;
  flex-flow: column nowrap;
  align-items: stretch;
}

#zen {
  grid-column: 2 / 3;
  grid-row: 40 / 41;
}

#window {
  grid-column: 1 / 2;
  grid-row: 41 / span 2;
}

#heap {
  grid-column: 41 / span 2;
  grid-row: 40 / span 3;
}

#transition {
  grid-column: 4 / span 2;
  grid-row: 7 / span 2;
}

#moire {
  grid-column: 7 / 8;
  grid-row: 3 / span 2;
}
#moire-circles {
  grid-column: 8 / 9;
  grid-row: 3 / 4;
}
#moire-burst {
  grid-column: 9 / 10;
  grid-row: 3 / 4;
}
#moire-dots {
  grid-column: 8 / 9;
  grid-row: 4 / 5;
}

/* MARK: Transitions
*/
@keyframes move-out {
  from {
    transform: translateY(0%);
  }

  to {
    transform: translateY(-100%);
    opacity: 0;
  }
}

@keyframes move-in {
  from {
    transform: translateY(100%);
    opacity: 0;
  }

  to {
    transform: translateY(0%);
  }
}

::view-transition-old(foo) {
  animation: 0.4s ease-in both move-out;
}

::view-transition-new(foo) {
  animation: 0.4s ease-in both move-in;
}

#transition {
  view-transition-name: foo;
  p {
  }
  img {
    display: none;
    max-width: 100%;
    margin: 1rem 0;
  }
  &.visual {
    p {
      display: none;
    }
    img {
      display: block;
    }
  }
}

/* MARK: Skull
*/
@property --skull-lightness {
  syntax: '<percentage>';
  initial-value: 100%;
  inherits: false;
}

@property --skull-hue {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}

@keyframes lightness {
  0% {
    --skull-lightness: 100%;
  }
  100% {
    --skull-lightness: 0%;
  }
}
@keyframes hue {
  0% {
    --skull-hue: 0deg;
  }
  100% {
    --skull-hue: 360deg;
  }
}

#skull {
  #thoughts {
    fill: black;
    @supports (fill: oklch(0 0 0)) {
      fill: oklch(var(--skull-lightness) 0.5 var(--skull-hue));

      @media (prefers-reduced-motion: no-preference) {
        animation: 10s hue infinite, 2s lightness infinite alternate;

        @supports (animation-timeline: view()) {
          animation: hue linear;
          animation-timeline: view(y);
        }
      }
    }
  }
}

/* MARK: Moire labels
*/
#moire-circles,
#moire-burst,
#moire-dots {
  label {
    display: flex;
    flex-flow: row-reverse;
    position: absolute;
    color: var(--medium);

    bottom: 0;

    /* @media (min-width: 30rem) {
      bottom: calc(-1.5 * var(--gap));
    } */
  }
}

/* MARK: Moire-circles
*/
@property --moire-circles {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}
@keyframes moire-circles {
  to {
    --moire-circles: 360deg;
  }
}
#moire-circles {
  &:has(input:checked) {
    animation: moire-circles 10s linear infinite;
    --offset-x: calc(50% + sin(var(--moire-circles)) * 50%);
    --offset-y: calc(50% + cos(var(--moire-circles)) * 50%);
  }

  --offset-x: calc(50% + sin(var(--moire-circles)) * 50%);
  --offset-y: calc(50% + cos(var(--moire-circles)) * 50%);

  min-width: 100%;
  aspect-ratio: 1/1;
  position: relative;
  background: repeating-radial-gradient(
      circle at 100% 100%,
      transparent,
      transparent 4px,
      var(--light) 4px,
      var(--light) 6px
    ),
    repeating-radial-gradient(
      circle at var(--offset-x) var(--offset-y),
      transparent,
      transparent 4px,
      var(--light) 4px,
      var(--light) 5px
    );
}

/* MARK: Moire-burst
*/
@property --moire-burst {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}
@keyframes moire-burst {
  to {
    --moire-burst: 360deg;
  }
}
#moire-burst {
  &:has(input:checked) {
    animation: moire-burst 10s linear infinite;
    --offset-x: calc(50% + sin(var(--moire-burst)) * 20%);
    --offset-y: calc(50% + cos(var(--moire-burst)) * 20%);
  }
  --offset-x: calc(50% + sin(var(--moire-burst)) * 20%);
  --offset-y: calc(50% + cos(var(--moire-burst)) * 20%);

  position: relative;

  min-width: 100%;
  aspect-ratio: 1/1;

  background: repeating-conic-gradient(at 50% 55%, transparent 0deg 2deg, var(--light) 2deg 3deg),
    repeating-conic-gradient(at var(--offset-x) var(--offset-y), transparent 0deg 2deg, var(--light) 2deg 3deg);
}

/* MARK: Moire dots
*/
@property --moire-dots {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: true;
}
@keyframes moire-dots {
  to {
    --moire-dots: 360deg;
  }
}
#moire-dots {
  &:has(input:checked) {
    animation: moire-dots 20s linear infinite;
  }

  position: relative;
  min-width: 100%;
  aspect-ratio: 1/1;

  background: radial-gradient(var(--light) 2px, transparent 0);
  background-size: 10px 10px;
  overflow: clip;

  &:before {
    content: '';
    position: absolute;
    width: 200%;
    height: 200%;
    top: -50%;
    left: -50%;
    background: radial-gradient(var(--light) 2px, transparent 0);
    background-size: 10px 10px;
    transform: rotate(var(--moire-dots));
  }
}

/* MARK: Penrose
*/
#penrose {
  --length: 84%;
  --step: calc(var(--length) / 5);
  --tan60: tan(60deg);

  position: relative;
  padding-top: calc(var(--step) * 1.2);
  padding-left: calc(var(--step) * 0.4);
  aspect-ratio: 1 / 1;

  div {
    position: absolute;
    width: 100%;
    aspect-ratio: 1 / 1;
    transform-origin: calc(var(--step) * 3) calc(var(--step) * 2);
    text-align: center;
    line-height: 2rem;

    clip-path: polygon(
      calc(var(--step) * 0.5) 0,
      calc(var(--step) * 5.5) 0,
      calc(var(--step) * 3.5) calc(var(--tan60) * (var(--step) * 2)),
      calc(var(--step) * 3) calc(var(--tan60) * (var(--step) * 1.5)),
      calc(var(--step) * 4) calc(var(--tan60) * (var(--step) * 0.5)),
      0 calc(var(--tan60) * var(--step) * 0.5)
    );

    &:nth-of-type(1) {
      transform: rotate(-40deg);
      background: var(--light);
      background: linear-gradient(to top, var(--light) 60%, transparent);
      color: var(--medium);
    }
    &:nth-of-type(2) {
      transform: rotate(80deg);
      background: var(--medium);
      background: linear-gradient(to top, var(--medium) 60%, var(--light));
      color: var(--dark);
    }
    &:nth-of-type(3) {
      transform: rotate(200deg);
      background: var(--dark);
      background: linear-gradient(to top, var(--dark) 60%, var(--medium));
      color: var(--light);
    }
  }
}

/* MARK: Reutersvard
*/
#reutersvard {
  --length: 28rem;

  @media (min-width: 30rem) {
    --length: 16.2rem;
    padding-left: 0.8rem;
  }
  @media (min-width: 60rem) {
    --length: 22rem;
  }

  --size: calc(var(--length) / 6);
  --gap: calc(var(--size) / 2);
  --step: calc(var(--size) + var(--gap));
  --rotateX: 55deg;

  position: relative;
  min-width: 100%;
  aspect-ratio: 1 / 1.2;

  & div,
  & div::before,
  & div::after,
  &::before,
  &::after {
    content: '';
    position: absolute;
    display: grid;
    place-items: center;
    transform-origin: 0 0;
    transform-style: preserve-3d;
    aspect-ratio: 1/1;
    width: var(--size);
  }

  & div {
    background: var(--light);
    background: linear-gradient(to top right, var(--light), white);

    &::before {
      transform: rotate3d(0, 1, 0, 90deg);
      background: var(--dark);
      background: linear-gradient(to bottom left, var(--dark), var(--medium));
    }
    &::after {
      top: 100%;
      transform: rotate3d(-1, 0, 0, 90deg);
      background: var(--medium);
      background: linear-gradient(to top right, var(--medium), var(--light));
    }

    &:nth-of-type(1) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 3.2), calc(var(--step) * -2), calc(var(--step) * -3.5));
    }
    &:nth-of-type(2) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 3.2), calc(var(--step) * -1), calc(var(--step) * -3.5));
    }
    &:nth-of-type(3) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 3.2), 0, calc(var(--step) * -3.5));
    }
    &:nth-of-type(4) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 2.2), 0, calc(var(--step) * -3.5));
    }
    &:nth-of-type(5) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 1.2), 0, calc(var(--step) * -3.5));
    }
    &:nth-of-type(6) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 0.2), 0, calc(var(--step) * -3.5));
    }
    &:nth-of-type(7) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 0.2), 0, calc(var(--step) * -2.5));
    }
    &:nth-of-type(8) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 0.2), 0, calc(var(--step) * -1.5));
    }
    &:nth-of-type(9) {
      transform: rotateX(var(--rotateX)) rotateZ(-45deg)
        translate3d(calc(var(--step) * 0.2), 0, calc(var(--step) * -0.5));
    }
  }

  &::before {
    transform: rotateX(var(--rotateX)) rotateZ(-45deg)
      translate3d(calc(var(--step) * 3.2), calc(var(--step) * -2), calc(var(--step) * -3.5));
    background: var(--light);
    background: linear-gradient(to top right, var(--light), white);
    z-index: 1;
  }

  &::after {
    transform: rotateX(35deg) rotateY(45deg)
      translate3d(calc(var(--step) * -2), calc(var(--step) * 3.5), calc(var(--step) * 3.2));
    background: var(--dark);
    background: linear-gradient(to top right, var(--dark), var(--medium));
    z-index: 1;
  }
}

/* MARK: Window
*/
#window {
  --wall: 1.5rem;
  aspect-ratio: 1 / 2;
  border: 1px solid black;
  border-top-left-radius: 10rem;
  border-top-right-radius: 10rem;
  background: darkgrey;
  background-image: linear-gradient(337deg, #4040ff 6% 6%, #ffd713 100%);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  box-shadow: inset var(--wall) calc(var(--wall) * 0.6) 0 silver,
    inset calc(var(--wall) + 1px) calc(var(--wall) * 0.6 + 1px) 0 black;
}
@supports (color: color(display-p3 1 1 1)) {
  #window {
    background-image: linear-gradient(
      337deg in lch,
      color(display-p3 25% 25% 100%) 6% 6%,
      color(display-p3 100% 85% 30%) 100%
    );
  }
}

@keyframes gradient {
  0% {
    background-position: top;
  }
  25% {
    background-position: left;
  }
  50% {
    background-position: bottom;
  }
  75% {
    background-position: right;
  }
  100% {
    background-position: top;
  }
}

/* MARK: Blockquotes
*/
blockquote {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  background-image: radial-gradient(black 15%, transparent 16%), radial-gradient(black 15%, transparent 16%);
  background-size: 8px 8px;
  background-position: 0 0, 4px 4px;
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
}
blockquote p {
  margin: 0;
  background: var(--bgcolor);
  text-wrap: balance;
  font-size: 1.9rem;
}
blockquote p::before {
  content: '“';
}
blockquote p::after {
  content: '„';
}
blockquote cite {
  padding-top: 0.5rem;
  font-size: 1rem;
  white-space: nowrap;
  background: var(--bgcolor);
}

/* MARK: Console
*/
section.console {
  position: relative;
  display: flex;
  flex-flow: column nowrap;
  border-radius: 1rem;
  flex-grow: 2;
}
section.console h2 {
  background: linear-gradient(to top, #ccc, #f5f5f5);
  color: #000;
  line-height: 1.4rem;
  font-size: 1rem;
  margin-bottom: 0;
  border-radius: 0.5rem 0.5rem 0 0;
  text-align: center;
}
section.console::before,
section.console::after {
  position: absolute;
  display: block;
  content: '';
  width: 0.7rem;
  height: 0.7rem;
  left: 0.4rem;
  top: 0.6rem;
  border-radius: 50%;
  z-index: 10;
}
section.console::before {
  background-color: red;
}
section.console::after {
  left: 1.4rem;
  background-color: orange;
}
section.console textarea {
  flex-grow: 2;
  min-height: 5rem;
  background: var(--termcolor) !important;
  resize: none;
  padding: 0.2rem;
  color: var(--bgcolor);
  font-family: monospace;
  text-align: left;
  outline: none !important;
  border-radius: 0 0 0.5rem 0.5rem;
}
